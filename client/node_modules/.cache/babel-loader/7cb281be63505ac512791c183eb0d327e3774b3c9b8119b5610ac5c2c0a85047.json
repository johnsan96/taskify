{"ast":null,"code":"var _jsxFileName = \"/home/john/Dokumente/projects/taskify/client/src/components/TaskTableRow.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { TableRow, TableCell } from '@mui/material';\nimport TaskDetailDialog from './TaskDetailDialog';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction TaskTableRow({\n  task,\n  tasks,\n  setTrack\n}) {\n  _s();\n  var _tasks$find, _tasks$find2;\n  const [isTaskDetailDialogOpen, setTaskDetailDialogOpen] = useState(false);\n  const [assignees, setAssignees] = useState([]);\n  const handleOpenTaskDetailDialog = () => {\n    setTaskDetailDialogOpen(true);\n  };\n  const handleCloseTaskDetailDialog = () => {\n    setTaskDetailDialogOpen(false);\n  };\n  const getStatusString = statusId => {\n    switch (statusId) {\n      case 1:\n        return 'Todo';\n      case 2:\n        return 'In Progress';\n      case 3:\n        return 'Completed';\n      default:\n        return 'Unknown Status';\n    }\n  };\n  useEffect(() => {\n    async function fetchAssignees() {\n      try {\n        const response = await axios.get(`${process.env.REACT_APP_API}/taskAssignees?task_id=${task.task_id}`);\n        const assigneesData = response.data;\n        if (assigneesData.length > 0) {\n          // Extrahiere die Benutzer-IDs aus den Zuweisungsdaten\n          const userIds = assigneesData.map(assignee => assignee.user_id);\n          // Für jede Benutzer-ID die Benutzerdaten abrufen und die Namen speichern\n          const names = await Promise.all(userIds.map(async userId => {\n            const userResponse = await axios.get(`${process.env.REACT_APP_API}/users/${userId}`);\n            return userResponse.data.username;\n          }));\n          setAssignees(names);\n        }\n      } catch (error) {\n        console.error('Fehler beim Abrufen der Task-Zuweisen:', error);\n      }\n    }\n    fetchAssignees();\n  }, [task.task_id]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TableRow, {\n      className: \"taskTableRow\",\n      onClick: handleOpenTaskDetailDialog,\n      children: [/*#__PURE__*/_jsxDEV(TableCell, {\n        component: \"th\",\n        scope: \"row\",\n        children: ((_tasks$find = tasks.find(t => t.id === task.task_id)) === null || _tasks$find === void 0 ? void 0 : _tasks$find.name) || 'Unknown Task'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n        children: getStatusString((_tasks$find2 = tasks.find(t => t.id === task.task_id)) === null || _tasks$find2 === void 0 ? void 0 : _tasks$find2.status_id)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n        children: [assignees.length > 0 ? assignees.join(', ') : 'Unassigned', \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TaskDetailDialog, {\n      open: isTaskDetailDialogOpen,\n      handleClose: () => {\n        handleCloseTaskDetailDialog();\n        setTrack(true);\n      },\n      taskId: task.task_id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(TaskTableRow, \"ESOVmq+JVmw7Uu7e5Zkpllc8zS4=\");\n_c = TaskTableRow;\nexport default TaskTableRow;\nvar _c;\n$RefreshReg$(_c, \"TaskTableRow\");","map":{"version":3,"names":["React","useState","useEffect","TableRow","TableCell","TaskDetailDialog","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","TaskTableRow","task","tasks","setTrack","_s","_tasks$find","_tasks$find2","isTaskDetailDialogOpen","setTaskDetailDialogOpen","assignees","setAssignees","handleOpenTaskDetailDialog","handleCloseTaskDetailDialog","getStatusString","statusId","fetchAssignees","response","get","process","env","REACT_APP_API","task_id","assigneesData","data","length","userIds","map","assignee","user_id","names","Promise","all","userId","userResponse","username","error","console","children","className","onClick","component","scope","find","t","id","name","fileName","_jsxFileName","lineNumber","columnNumber","status_id","join","open","handleClose","taskId","_c","$RefreshReg$"],"sources":["/home/john/Dokumente/projects/taskify/client/src/components/TaskTableRow.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { TableRow, TableCell } from '@mui/material';\nimport TaskDetailDialog from './TaskDetailDialog';\nimport axios from 'axios';\n\nfunction TaskTableRow({ task, tasks, setTrack }) {\n    const [isTaskDetailDialogOpen, setTaskDetailDialogOpen] = useState(false);\n    const [assignees, setAssignees] = useState([]);\n\n    const handleOpenTaskDetailDialog = () => {\n        setTaskDetailDialogOpen(true);\n    };\n\n    const handleCloseTaskDetailDialog = () => {\n        setTaskDetailDialogOpen(false);\n    };\n\n    const getStatusString = (statusId) => {\n        switch (statusId) {\n            case 1:\n                return 'Todo';\n            case 2:\n                return 'In Progress';\n            case 3:\n                return 'Completed';\n            default:\n                return 'Unknown Status';\n        }\n    };\n\n\n    useEffect(() => {\n        async function fetchAssignees() {\n            try {\n                const response = await axios.get(`${process.env.REACT_APP_API}/taskAssignees?task_id=${task.task_id}`);\n                const assigneesData = response.data;\n                if (assigneesData.length > 0) {\n                    // Extrahiere die Benutzer-IDs aus den Zuweisungsdaten\n                    const userIds = assigneesData.map(assignee => assignee.user_id);\n                    // Für jede Benutzer-ID die Benutzerdaten abrufen und die Namen speichern\n                    const names = await Promise.all(userIds.map(async userId => {\n                        const userResponse = await axios.get(`${process.env.REACT_APP_API}/users/${userId}`);\n                        return userResponse.data.username;\n                    }));\n                    setAssignees(names);\n                }\n            } catch (error) {\n                console.error('Fehler beim Abrufen der Task-Zuweisen:', error);\n            }\n        }\n\n        fetchAssignees();\n    }, [task.task_id]);\n\n    return (\n        <>\n            <TableRow className=\"taskTableRow\" onClick={handleOpenTaskDetailDialog}>\n                <TableCell component=\"th\" scope=\"row\">\n                    {tasks.find(t => t.id === task.task_id)?.name || 'Unknown Task'}\n                </TableCell>\n                <TableCell>\n                    {getStatusString(tasks.find(t => t.id === task.task_id)?.status_id)}\n                </TableCell>\n\n                <TableCell>\n                    {assignees.length > 0 ? assignees.join(', ') : 'Unassigned'} {/* Zeigt die zugewiesenen Benutzer oder \"Unassigned\" an */}\n                </TableCell>\n            </TableRow>\n            <TaskDetailDialog open={isTaskDetailDialogOpen}\n                handleClose={() => { handleCloseTaskDetailDialog(); setTrack(true); }}\n                taskId={task.task_id}\n            />\n        </>\n    );\n}\n\nexport default TaskTableRow;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}