{"ast":null,"code":"var _jsxFileName = \"/home/john/Dokumente/projects/taskify/client/src/components/TaskTableRow.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { TableRow, TableCell } from '@mui/material';\nimport TaskDetailDialog from './TaskDetailDialog';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction TaskTableRow({\n  task,\n  tasks\n}) {\n  _s();\n  var _tasks$find, _tasks$find2;\n  const [isTaskDetailDialogOpen, setTaskDetailDialogOpen] = useState(false);\n  const handleOpenTaskDetailDialog = () => {\n    setTaskDetailDialogOpen(true);\n  };\n  const handleCloseTaskDetailDialog = () => {\n    setTaskDetailDialogOpen(false);\n  };\n\n  // Funktion zum Übersetzen des Statuswerts in den entsprechenden String\n  const getStatusString = statusId => {\n    switch (statusId) {\n      case 1:\n        return 'Todo';\n      case 2:\n        return 'In Progress';\n      case 3:\n        return 'Completed';\n      default:\n        return 'Unknown Status';\n    }\n  };\n  useEffect(() => {\n    async function fetchAssignee() {\n      try {\n        const response = await axios.get(`http://localhost:4000/taskAssignees?task_id=${task.task_id}`);\n        const assigneeData = response.data;\n        if (assigneeData.length > 0) {\n          setAssignee(assigneeData[0].user_id); // Annahme: Es wird nur ein Benutzer pro Task zugewiesen\n        }\n      } catch (error) {\n        console.error('Fehler beim Abrufen des Task-Zuweisen:', error);\n      }\n    }\n    fetchAssignee();\n  }, [task.task_id]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TableRow, {\n      className: \"taskTableRow\",\n      onClick: handleOpenTaskDetailDialog,\n      children: [/*#__PURE__*/_jsxDEV(TableCell, {\n        component: \"th\",\n        scope: \"row\",\n        children: ((_tasks$find = tasks.find(t => t.id === task.task_id)) === null || _tasks$find === void 0 ? void 0 : _tasks$find.name) || 'Unknown Task'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n        children: getStatusString((_tasks$find2 = tasks.find(t => t.id === task.task_id)) === null || _tasks$find2 === void 0 ? void 0 : _tasks$find2.status_id)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n        children: [assignee ? assignee : 'Unassigned', \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TaskDetailDialog, {\n      open: isTaskDetailDialogOpen,\n      handleClose: handleCloseTaskDetailDialog,\n      taskId: task.task_id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(TaskTableRow, \"IrCXxIXqvmKYQnMhvPrRDoSzMP0=\");\n_c = TaskTableRow;\nexport default TaskTableRow;\nvar _c;\n$RefreshReg$(_c, \"TaskTableRow\");","map":{"version":3,"names":["React","useState","TableRow","TableCell","TaskDetailDialog","jsxDEV","_jsxDEV","Fragment","_Fragment","TaskTableRow","task","tasks","_s","_tasks$find","_tasks$find2","isTaskDetailDialogOpen","setTaskDetailDialogOpen","handleOpenTaskDetailDialog","handleCloseTaskDetailDialog","getStatusString","statusId","useEffect","fetchAssignee","response","axios","get","task_id","assigneeData","data","length","setAssignee","user_id","error","console","children","className","onClick","component","scope","find","t","id","name","fileName","_jsxFileName","lineNumber","columnNumber","status_id","assignee","open","handleClose","taskId","_c","$RefreshReg$"],"sources":["/home/john/Dokumente/projects/taskify/client/src/components/TaskTableRow.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { TableRow, TableCell } from '@mui/material';\nimport TaskDetailDialog from './TaskDetailDialog';\n\nfunction TaskTableRow({ task, tasks }) {\n    const [isTaskDetailDialogOpen, setTaskDetailDialogOpen] = useState(false);\n\n    const handleOpenTaskDetailDialog = () => {\n        setTaskDetailDialogOpen(true);\n    };\n\n    const handleCloseTaskDetailDialog = () => {\n        setTaskDetailDialogOpen(false);\n    };\n\n    // Funktion zum Übersetzen des Statuswerts in den entsprechenden String\n    const getStatusString = (statusId) => {\n        switch (statusId) {\n            case 1:\n                return 'Todo';\n            case 2:\n                return 'In Progress';\n            case 3:\n                return 'Completed';\n            default:\n                return 'Unknown Status';\n        }\n    };\n\n    useEffect(() => {\n        async function fetchAssignee() {\n            try {\n                const response = await axios.get(`http://localhost:4000/taskAssignees?task_id=${task.task_id}`);\n                const assigneeData = response.data;\n                if (assigneeData.length > 0) {\n                    setAssignee(assigneeData[0].user_id); // Annahme: Es wird nur ein Benutzer pro Task zugewiesen\n                }\n            } catch (error) {\n                console.error('Fehler beim Abrufen des Task-Zuweisen:', error);\n            }\n        }\n\n        fetchAssignee();\n    }, [task.task_id]);\n\n    return (\n        <>\n            <TableRow className=\"taskTableRow\" onClick={handleOpenTaskDetailDialog}>\n                <TableCell component=\"th\" scope=\"row\">\n                    {tasks.find(t => t.id === task.task_id)?.name || 'Unknown Task'}\n                </TableCell>\n                <TableCell>\n                    {getStatusString(tasks.find(t => t.id === task.task_id)?.status_id)}\n                </TableCell>\n\n                <TableCell>\n                    {assignee ? assignee : 'Unassigned'} {/* Zeigt den zugewiesenen Benutzer oder \"Unassigned\" an */}\n                </TableCell>\n            </TableRow>\n            <TaskDetailDialog open={isTaskDetailDialogOpen} handleClose={handleCloseTaskDetailDialog} taskId={task.task_id} />\n        </>\n    );\n}\n\nexport default TaskTableRow;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}